{"remainingRequest":"D:\\Files\\iGEM\\iGEM 2018\\wiki-tutorial\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[[\"D:\\\\Files\\\\iGEM\\\\iGEM 2018\\\\wiki-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\index.js\",{\"flow\":true}]],\"plugins\":[],\"cacheDirectory\":true,\"babelrc\":false}!D:\\Files\\iGEM\\iGEM 2018\\wiki-tutorial\\src\\HTMLII.mdx","dependencies":[{"path":"D:\\Files\\iGEM\\iGEM 2018\\wiki-tutorial\\src\\HTMLII.mdx","mtime":1535673887653},{"path":"D:\\Files\\iGEM\\iGEM 2018\\wiki-tutorial\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535643865817},{"path":"D:\\Files\\iGEM\\iGEM 2018\\wiki-tutorial\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js","mtime":1535643865763}],"contextDependencies":[],"result":["var _jsxFileName = \"D:\\\\Files\\\\iGEM\\\\iGEM 2018\\\\wiki-tutorial\\\\src\\\\HTMLII.mdx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nimport { Img } from './Img';\nexport default (function (_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components,\n    props: {\n      \"id\": \"html-with-mediawiki\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h1\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#html-with-mediawiki\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"#\")), \"HTML with MediaWiki\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"If you read about HTML and got started with it earlier, you'll know there was a large setup around using \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"<!DOCTYPE html>\"), \" with \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"<head>\"), \" and \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"<body>\"), \" and all that. That is not necessary with the iGEM MediaWiki system. You can still make \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"head\"), \" tags to hide \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"meta\"), \" or \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"script\"), \" tags, but in reality, you can immediately just start typing stuff and it'll appear on the page. This is because what iGEM does is it takes whatever content you put in and plugs it into a giant \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"<div>\"), \" tag that they have set aside. \"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Certain tags don't work without being wrapped in the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"<html>\"), \" tag. As a practice, I just always wrap my HTML in an \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"<html>\"), \" tag.\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"existing-class-and-ids\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#existing-class-and-ids\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"#\")), \"Existing class and IDs\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"iGEM Wiki has some default styles and classes that will have their own styling on it. Take note that if you somehow manage to use these IDs or Class names on your HTML tags, it will have styles overridden by iGEM's defaults. A good way to avoid this from happening (other than overriding iGEM default CSS styles) is to just add something you know will not exist. For example, iGEM has the ID \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"#content\"), \" reserved in their default CSS. If you wanted to have a \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"<div id=\\\"content\\\">\"), \", your div would be styled with whatever iGEM has for their CSS for that ID. I would name it \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"<div id=\\\"uw-content\\\">\"), \".\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"an-example\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#an-example\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"#\")), \"An example\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Starting from now, I'll start making actual example wiki pages, that I'll be building on for the next few chapters to introduce new concepts. In this case, I'll be making \", React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://2018.igem.org/Team:Washington/ExamplePageOne\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"http://2018.igem.org/Team:Washington/ExamplePageOne\"), \" and \", React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://2018.igem.org/Team:Washington/ExamplePageTwo\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"http://2018.igem.org/Team:Washington/ExamplePageTwo\"), \".\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"For now, I'll be keeping all iGEM defaults, and just put the following on each page:\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"ExamplePageOne (EP1): \"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"<html>\\n    <h1 id=\\\"uw-header\\\">iGEM Washington Example</h1>\\n    <h2 id=\\\"uw-subheader\\\">This is the example page one</h2>\\n    <p id=\\\"uw-content\\\">Content content content content content</p>\\n</html>\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"ExamplePageTwo: \"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"<html>\\n    <h1 id=\\\"uw-header\\\">iGEM Washington Example</h1>\\n    <h2 id=\\\"uw-subheader\\\">This is the example page two</h2>\\n    <p id=\\\"uw-content\\\">Different content than the first page</p>\\n</html>\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"EP1 looks like this:\"), React.createElement(Img, {\n    src: require('./imgs/1-1.png'),\n    alt: \"example page one part 1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"EP2 looks like this:\"), React.createElement(Img, {\n    src: require('./imgs/2-1.png'),\n    alt: \"example page two part 1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"words-on-this-example\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#words-on-this-example\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"#\")), \"Words on this example\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"This looks really bad. I entered blank content, why can't I have a blank page? Why does iGEM have their large logo, and the page title on there? How do I get rid of it?! I will teach this in due time. For now, let me introduce templating, CSS, and JavaScript, as well as templates, before we get rid of all this code. It'll make it easier.\"));\n});",{"version":3,"sources":["src\\HTMLII.mdx"],"names":["React","MDXTag","Img","components","props","require"],"mappings":"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","sourceRoot":"D:\\Files\\iGEM\\iGEM 2018\\wiki-tutorial","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import {Img} from './Img';\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"html-with-mediawiki\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"aria-hidden\":true,\"href\":\"#html-with-mediawiki\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`HTML with MediaWiki`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you read about HTML and got started with it earlier, you'll know there was a large setup around using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<!DOCTYPE html>`}</MDXTag>{` with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<head>`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<body>`}</MDXTag>{` and all that. That is not necessary with the iGEM MediaWiki system. You can still make `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`head`}</MDXTag>{` tags to hide `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`meta`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`script`}</MDXTag>{` tags, but in reality, you can immediately just start typing stuff and it'll appear on the page. This is because what iGEM does is it takes whatever content you put in and plugs it into a giant `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<div>`}</MDXTag>{` tag that they have set aside. `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Certain tags don't work without being wrapped in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<html>`}</MDXTag>{` tag. As a practice, I just always wrap my HTML in an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<html>`}</MDXTag>{` tag.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"existing-class-and-ids\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#existing-class-and-ids\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Existing class and IDs`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`iGEM Wiki has some default styles and classes that will have their own styling on it. Take note that if you somehow manage to use these IDs or Class names on your HTML tags, it will have styles overridden by iGEM's defaults. A good way to avoid this from happening (other than overriding iGEM default CSS styles) is to just add something you know will not exist. For example, iGEM has the ID `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`#content`}</MDXTag>{` reserved in their default CSS. If you wanted to have a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<div id=\"content\">`}</MDXTag>{`, your div would be styled with whatever iGEM has for their CSS for that ID. I would name it `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<div id=\"uw-content\">`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"an-example\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#an-example\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`An example`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Starting from now, I'll start making actual example wiki pages, that I'll be building on for the next few chapters to introduce new concepts. In this case, I'll be making `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://2018.igem.org/Team:Washington/ExamplePageOne\"}}>{`http://2018.igem.org/Team:Washington/ExamplePageOne`}</MDXTag>{` and `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://2018.igem.org/Team:Washington/ExamplePageTwo\"}}>{`http://2018.igem.org/Team:Washington/ExamplePageTwo`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For now, I'll be keeping all iGEM defaults, and just put the following on each page:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`ExamplePageOne (EP1): `}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\">{`<html>\n    <h1 id=\"uw-header\">iGEM Washington Example</h1>\n    <h2 id=\"uw-subheader\">This is the example page one</h2>\n    <p id=\"uw-content\">Content content content content content</p>\n</html>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`ExamplePageTwo: `}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\">{`<html>\n    <h1 id=\"uw-header\">iGEM Washington Example</h1>\n    <h2 id=\"uw-subheader\">This is the example page two</h2>\n    <p id=\"uw-content\">Different content than the first page</p>\n</html>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`EP1 looks like this:`}</MDXTag>\n<Img src={require('./imgs/1-1.png')} alt={\"example page one part 1\"} />\n<MDXTag name=\"p\" components={components}>{`EP2 looks like this:`}</MDXTag>\n<Img src={require('./imgs/2-1.png')} alt={\"example page two part 1\"} />\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"words-on-this-example\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#words-on-this-example\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Words on this example`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This looks really bad. I entered blank content, why can't I have a blank page? Why does iGEM have their large logo, and the page title on there? How do I get rid of it?! I will teach this in due time. For now, let me introduce templating, CSS, and JavaScript, as well as templates, before we get rid of all this code. It'll make it easier.`}</MDXTag></MDXTag>\n  "]}]}